{"version":3,"sources":["../../server/middlewares/authentication.js"],"names":["Authorization","req","res","next","token","headers","authorization","split","decoded","Helper","verifyToken","userData","error","status","json","statusCode","isAdmin","send"],"mappings":";;;;;;;AAAA;;;;;;;;;;AAEA;;;;;IAKMA,a;;;;;;;;;;AACJ;;;;;;+BAMkBC,G,EAAKC,G,EAAKC,I,EAAM;AAChC,UAAI;AACF,YAAMC,KAAK,GAAGH,GAAG,CAACI,OAAJ,CAAYC,aAAZ,CAA0BC,KAA1B,CAAgC,GAAhC,EAAqC,CAArC,CAAd;;AACA,YAAMC,OAAO,GAAGC,mBAAOC,WAAP,CAAmBN,KAAnB,CAAhB;;AACAH,QAAAA,GAAG,CAACU,QAAJ,GAAeH,OAAf;AAEA,eAAOL,IAAI,EAAX;AACD,OAND,CAME,OAAOS,KAAP,EAAc;AACd,eAAOV,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,UAAAA,MAAM,EAAEX,GAAG,CAACa,UADc;AAE1BH,UAAAA,KAAK,EAAE;AAFmB,SAArB,CAAP;AAID;AACF;AAGD;;;;;;;;;gCAMmBX,G,EAAKC,G,EAAKC,I,EAAM;AACjC,UAAI;AACF,YAAMC,KAAK,GAAGH,GAAG,CAACI,OAAJ,CAAYC,aAAZ,CAA0BC,KAA1B,CAAgC,GAAhC,EAAqC,CAArC,CAAd;;AACA,YAAMC,OAAO,GAAGC,mBAAOC,WAAP,CAAmBN,KAAnB,CAAhB;;AACAH,QAAAA,GAAG,CAACU,QAAJ,GAAeH,OAAf;;AACA,YAAIP,GAAG,CAACU,QAAJ,CAAaK,OAAb,KAAyB,KAA7B,EAAoC;AAClC,iBAAOd,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBI,IAAhB,CAAqB;AAC1BJ,YAAAA,MAAM,EAAEX,GAAG,CAACa,UADc;AAE1BH,YAAAA,KAAK,EAAE;AAFmB,WAArB,CAAP;AAID;;AAED,eAAOT,IAAI,EAAX;AACD,OAZD,CAYE,OAAOS,KAAP,EAAc;AACd,eAAOV,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBI,IAAhB,CAAqB;AAC1BJ,UAAAA,MAAM,EAAEX,GAAG,CAACa,UADc;AAE1BH,UAAAA,KAAK,EAAE;AAFmB,SAArB,CAAP;AAID;AACF;;;;;;eAGYZ,a","sourcesContent":["import Helper from '../utilities/helper';\n\n/**\n * @class DummyAuthentication\n * @description To verify user\n * @exports Authorization\n */\nclass Authorization {\n  /**\n   * @param  {object} req - The user request object\n   * @param  {object} res - The user res response object\n   * @param  {function} next - The next() Function\n   * @returns {object} payload\n   */\n  static verifyUser(req, res, next) {\n    try {\n      const token = req.headers.authorization.split(' ')[1];\n      const decoded = Helper.verifyToken(token);\n      req.userData = decoded;\n\n      return next();\n    } catch (error) {\n      return res.status(401).json({\n        status: res.statusCode,\n        error: 'user not found, please register to perform this action',\n      });\n    }\n  }\n\n\n  /**\n   * @param  {object} req - The Admin request object\n   * @param  {object} res - The Admin res response object\n   * @param  {function} next - The next() Function\n   * @returns {object} payload\n   */\n  static verifyAdmin(req, res, next) {\n    try {\n      const token = req.headers.authorization.split(' ')[1];\n      const decoded = Helper.verifyToken(token);\n      req.userData = decoded;\n      if (req.userData.isAdmin === false) {\n        return res.status(403).send({\n          status: res.statusCode,\n          error: 'You are not authorized to perform this action',\n        });\n      }\n\n      return next();\n    } catch (error) {\n      return res.status(401).send({\n        status: res.statusCode,\n        error: 'Authentication Failed',\n      });\n    }\n  }\n}\n\nexport default Authorization;\n"],"file":"authentication.js"}