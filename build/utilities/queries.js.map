{"version":3,"sources":["../../server/utilities/queries.js"],"names":["saltRounds","obj","err","queryProvider","email","Promise","resolve","reject","query","db","then","result","rowCount","Message","Status","rows","error","busid","console","log","tripid","seatnumber","origin","destination","status","id","plateNumber","message","response","messager","numberPlate","seatNumber","users","bookingId","userId","body","firstName","lastName","password","phoneNumber","isAdmin","today","Date","date","getFullYear","getMonth","getDate","time","getHours","getMinutes","getSeconds","createdAt","findUserByEmailQuery","bcrypt","hash","queryBody","e","userid","manufacturer","model","year","capacity","findBusByplateNumberQuery","busId","tripDate","fare","tripDateformat","format","findBusByBusid","res","findBusStatus","obj1","Error","tripId","findTripsById","Number","obj2","findSeatNumberByTripid","respond","length","erro","useremail","userfname","userlname","tripdate"],"mappings":"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","sourcesContent":["import bcrypt from 'bcrypt';\nimport moment from 'moment';\nimport db from './database/connect';\n\n\nconst saltRounds = 10;\nconst obj = {};\nconst err = {};\n\n\n/**\n * @exports\n * @class queryProvider\n */\nclass queryProvider {\n  /**\n   * Find user by email\n   * @staticmethod\n   * @param  {string} email - Request object\n   * @return {string} res\n   */\n  static findUserByEmailQuery(email) {\n    return new Promise((resolve, reject) => {\n      const query = `SELECT * FROM users WHERE email = '${email}' `;\n      db.query(query)\n        .then((result) => {\n          if (!(result.rowCount)) {\n            err.Message = 'user does not exist';\n            err.Status = 400;\n            reject(err);\n          } else if (result.rowCount) {\n            obj.rowCount = result.rowCount;\n            obj.rows = result.rows;\n            resolve(obj);\n          }\n        })\n        .catch((error) => {\n          err.Message = 'Error Finding User';\n          err.Status = '02';\n          reject(err);\n        });\n    });\n  }\n\n\n  /**\n   * Find busid by user\n   * @staticmethod\n   * @param  {string} email - Request object\n   * @return {string} res\n   */\n  static findBusStatus(busid) {\n    console.log('printbus', busid);\n    return new Promise((resolve, reject) => {\n      const query = `SELECT * FROM Trips WHERE busid = ${busid} And status = 'active'`;\n      db.query(query)\n        .then((result) => {\n          console.log('theeee', result);\n          if (result.rowCount >= 1) {\n            err.Message = 'bus not available';\n            err.Status = 400;\n            reject(err);\n          } else {\n            obj.rowCount = result.rowCount;\n            obj.rows = result.rows;\n            resolve(obj);\n          }\n        })\n        .catch((error) => {\n          console.log('yea error', error);\n          err.Message = 'Error Finding busid from trip';\n          err.Status = '02';\n          reject(err);\n        });\n    });\n  }\n\n\n  /**\n   * Find busid by user\n   * @staticmethod\n   * @param  {string} email - Request object\n   * @return {string} res\n   */\n  static findSeatNumberByTripid(tripid, seatnumber) {\n    console.log('printbuseee', tripid, seatnumber);\n    return new Promise((resolve, reject) => {\n      const query = `SELECT * FROM Bookings WHERE tripid = '${tripid}' And seatnumber = '${seatnumber}'`;\n      db.query(query)\n        .then((result) => {\n          console.log('theeee', result);\n          console.log('rowww', result.rowCount);\n          if (result.rowCount >= 1) {\n            err.Message = 'seatnumber not available';\n            err.Status = 400;\n            reject(err);\n          } else {\n            obj.rowCount = result.rowCount;\n            obj.rows = result.rows;\n            resolve(obj);\n          }\n        })\n        .catch((error) => {\n          console.log('yea error', error);\n          err.Message = 'Error Finding tripid from trip';\n          err.Status = '02';\n          reject(err);\n        });\n    });\n  }\n\n  /**\n   * Find busid by user\n   * @staticmethod\n   * @param  {string} email - Request object\n   * @return {string} res\n   */\n  static viewAllTripsbyOriginDestinationQuery(origin, destination) {\n    console.log('originnnnn', destination, origin);\n    return new Promise((resolve, reject) => {\n      const query = `SELECT * FROM Trips WHERE origin = '${origin}' and destination = '${destination}' `;\n      db.query(query)\n        .then((result) => {\n          console.log('theeee', result);\n          console.log('rowww', result.rowCount);\n          if (!(result.rowCount)) {\n            err.Message = 'Trips destination and origin cant be fetched';\n            err.status = 400;\n            reject(err);\n          } else {\n            obj.rowCount = result.rowCount;\n            obj.rows = result.rows;\n            resolve(obj);\n          }\n        })\n        .catch((error) => {\n          console.log('yea error', error);\n          err.Message = 'Error Finding origin from trip';\n          err.Status = '02';\n          reject(err);\n        });\n    });\n  }\n\n\n  /**\n   * Find busid by user\n   * @staticmethod\n   * @param  {string} email - Request object\n   * @return {string} res\n   */\n  static findAllTripsbyOriginQuery(origin) {\n    console.log('printbuseee', origin);\n    return new Promise((resolve, reject) => {\n      const query = `SELECT * FROM Trips WHERE origin = '${origin}' `;\n      db.query(query)\n        .then((result) => {\n          console.log('theeee', result);\n          console.log('rowww', result.rowCount);\n          if (!(result.rowCount)) {\n            err.Message = 'Trips origin cant be  fetched';\n            err.status = 400;\n            reject(err);\n          } else {\n            obj.rowCount = result.rowCount;\n            obj.rows = result.rows;\n            resolve(obj);\n          }\n        })\n        .catch((error) => {\n          console.log('yea error', error);\n          err.Message = 'Error Finding origin from trip';\n          err.Status = '02';\n          reject(err);\n        });\n    });\n  }\n\n  /**\n   * Find busid by user\n   * @staticmethod\n   * @param  {string} email - Request object\n   * @return {string} res\n   */\n  static findAllTripsbyDestinationQuery(destination) {\n    console.log(destination);\n    return new Promise((resolve, reject) => {\n      const query = `SELECT * FROM Trips WHERE destination = '${destination}' `;\n      db.query(query)\n        .then((result) => {\n          console.log('theeee', result);\n          console.log('rowww', result.rowCount);\n          if (!(result.rowCount)) {\n            err.Message = 'Trips destination cant be fetched';\n            err.Status = 400;\n            reject(err);\n          } else {\n            obj.rowCount = result.rowCount;\n            obj.rows = result.rows;\n            resolve(obj);\n          }\n        })\n        .catch((error) => {\n          console.log('yea error', error);\n          err.Message = 'Error Finding destination from trip';\n          err.Status = '02';\n          reject(err);\n        });\n    });\n  }\n\n\n  /**\n   * Find Trip By id\n   * @staticmethod\n   * @param  {string} id - Request object\n   * @return {string} res\n   */\n  static findTripsById(id) {\n    return new Promise((resolve, reject) => {\n      const query = `SELECT * FROM Trips WHERE id = '${id}'`;\n      db.query(query)\n        .then((result) => {\n          if (!(result.rowCount)) {\n            err.Message = 'Trip number not found';\n            err.Status = 400;\n            reject(err);\n          } else if (result.rowCount >= 1) {\n            obj.rowCount = result.rowCount;\n            obj.rows = result.rows;\n            resolve(obj);\n          }\n        })\n        .catch(() => {\n          err.Message = 'Error Finding trip';\n          err.Status = '02';\n          reject(err);\n        });\n    });\n  }\n\n\n  /**\n   * Find user By id\n   * @staticmethod\n   * @param  {string} id - Request object\n   * @return {string} res\n   */\n  static findUserById(id) {\n    return new Promise((resolve, reject) => {\n      const query = `SELECT * FROM users WHERE id = '${id}'`;\n      db.query(query)\n        .then((result) => {\n          if (result.rowCount === 0) {\n            err.Message = 'user Array Empty';\n            err.Status = 400;\n            reject(err);\n          } else if (result.rowCount >= 1) {\n            obj.rowCount = result.rowCount;\n            obj.rows = result.rows;\n            resolve(obj);\n          }\n        })\n        .catch(() => {\n          err.Message = 'Error Finding user';\n          err.Status = '02';\n          reject(err);\n        });\n    });\n  }\n\n\n  /**\n   * Find bus by userid\n   * @staticmethod\n   * @param  {string} email - Request object\n   * @return {string} res\n   */\n  static findBusByBusid(busid) {\n    return new Promise((resolve, reject) => {\n      console.log('busid', busid);\n      const query = `SELECT * FROM Buses WHERE id = ${busid}`;\n      db.query(query)\n        .then((result) => {\n          if (result.rowCount === 0) {\n            err.Message = 'bus does not exist';\n            reject(err);\n          } else {\n            obj.rowCount = result.rowCount;\n            obj.rows = result.rows;\n            resolve(obj);\n          }\n        })\n        .catch((error) => {\n          console.log(error);\n          err.Message = 'Error Finding Bus';\n          err.Status = '02';\n          reject(err);\n        });\n    });\n  }\n\n  /**\n   * Find bus by plate number\n   * @staticmethod\n   * @param  {string} email - Request object\n   * @return {string} res\n   */\n  static findBusByplateNumberQuery(plateNumber) {\n    return new Promise((resolve, reject) => {\n      const query = `SELECT * FROM Buses WHERE number_plate = '${plateNumber}' `;\n      db.query(query)\n        .then((result) => {\n          if (!(result.rowCount)) {\n            err.Message = 'bus does not exist';\n            err.Status = 400;\n            reject(err);\n          } else if (result.rowCount) {\n            obj.rowCount = result.rowCount;\n            obj.rows = result.rows;\n            resolve(obj);\n          }\n        })\n        .catch(() => {\n          err.Message = 'Error Finding Bus';\n          err.Status = '02';\n          reject(err);\n        });\n    });\n  }\n\n\n  /**\n   * Delete user by email\n   * @staticmethod\n   * @param  {string} email - Request object\n   * @return {string} res\n   */\n  static deleteUserByEmailQuery(email) {\n    return new Promise((resolve, reject) => {\n      const query = `DELETE FROM users WHERE email = '${email}'`;\n      db.query(query)\n        .then((result) => {\n          if (result.rowCount === 0) {\n            const message = 'user does not exist';\n            reject(message);\n          } else if (result.rowCount >= 1) {\n            const response = 'User Deleted';\n            resolve(response);\n          }\n        })\n        .catch((error) => {\n          const messager = 'Error Finding User';\n          reject(error);\n        });\n    });\n  }\n\n  /**\n   * Delete user by email\n   * @staticmethod\n   * @param  {string} email - Request object\n   * @return {string} res\n   */\n  static deleteBusByplateNumber(numberPlate) {\n    return new Promise((resolve, reject) => {\n      const query = `DELETE FROM Buses WHERE number_plate = '${numberPlate}'`;\n      db.query(query)\n        .then((result) => {\n          if (result.rowCount === 0) {\n            const message = 'plate number does not exist';\n            reject(message);\n          } else if (result.rowCount >= 1) {\n            const response = 'bus Deleted';\n            resolve(response);\n          }\n        })\n        .catch((error) => {\n          const messager = 'Error Finding bus';\n          reject(error);\n        });\n    });\n  }\n\n\n  /**\n   * Delete user by email\n   * @staticmethod\n   * @param  {string} email - Request object\n   * @return {string} res\n   */\n  static deleteSeatNumber(seatNumber) {\n    return new Promise((resolve, reject) => {\n      const query = `DELETE FROM Bookings WHERE seatnumber= '${seatNumber}'`;\n      db.query(query)\n        .then((result) => {\n          if (result.rowCount === 0) {\n            const message = 'seatnumber number does not exist';\n            reject(message);\n          } else if (result.rowCount >= 1) {\n            const response = 'seatnumber Deleted';\n            resolve(response);\n          }\n        })\n        .catch((error) => {\n          const messager = 'Error Finding seatnumber';\n          reject(error);\n        });\n    });\n  }\n\n\n  /**\n   * Delete user by email\n   * @staticmethod\n   * @param  {string} email - Request object\n   * @return {string} res\n   */\n  static deleteTripIdFromBooking(tripid) {\n    return new Promise((resolve, reject) => {\n      const query = `DELETE FROM Bookings WHERE tripid = '${tripid}'`;\n      db.query(query)\n        .then((result) => {\n          if (result.rowCount === 0) {\n            const message = 'tripid number does not exist';\n            reject(message);\n          } else if (result.rowCount >= 1) {\n            const response = 'tripid Deleted';\n            resolve(response);\n          }\n        })\n        .catch((error) => {\n          const messager = 'Error Finding tripid';\n          reject(error);\n        });\n    });\n  }\n\n  /**\n   * Find all Booking\n   * @staticmethod\n   * @param  {string} id - Request object\n   * @return {string} res\n   */\n  static findAllmyBookingQuery(users) {\n    return new Promise((resolve, reject) => {\n      const query = `SELECT * FROM Bookings WHERE createduser = '${users}'`;\n      db.query(query)\n        .then((result) => {\n          if (!(result.rowCount)) {\n            err.Message = 'Bookings Array Empty';\n            err.Status = 400;\n            reject(err);\n          } else if (result.rowCount) {\n            obj.rowCount = result.rowCount;\n            obj.rows = result.rows;\n            resolve(obj);\n          }\n        })\n        .catch(() => {\n          err.Message = 'Error Finding All Trips';\n          err.Status = '02';\n          reject(err);\n        });\n    });\n  }\n\n\n  /**\n   * Find all Booking\n   * @staticmethod\n   * @param  {string} id - Request object\n   * @return {string} res\n   */\n  static findAllBookingsQuery() {\n    return new Promise((resolve, reject) => {\n      const query = 'SELECT * FROM Bookings ';\n      db.query(query)\n        .then((result) => {\n          if (!(result.rowCount)) {\n            err.Message = 'Bookings Array Empty';\n            err.Status = 400;\n            reject(err);\n          } else if (result.rowCount) {\n            obj.rowCount = result.rowCount;\n            obj.rows = result.rows;\n            resolve(obj);\n          }\n        })\n        .catch(() => {\n          err.Message = 'Error Finding All Trips';\n          err.Status = '02';\n          reject(err);\n        });\n    });\n  }\n\n\n  /**\n   * Delete user by email\n   * @staticmethod\n   * @param  {string} email - Request object\n   * @return {string} res\n   */\n  static deleteBookingByid(bookingId) {\n    return new Promise((resolve, reject) => {\n      const query = `DELETE FROM Bookings WHERE id = '${bookingId}'`;\n      db.query(query)\n        .then((result) => {\n          if (result.rowCount === 0) {\n            const message = {};\n            message.status = 400;\n            message.error = 'booking id does not exist';\n            reject(message);\n          } else if (result.rowCount >= 1) {\n            const response = 'booking Deleted';\n            resolve(response);\n          }\n        })\n        .catch((error) => {\n          const messager = 'Error Finding Booking Id';\n          reject(error);\n        });\n    });\n  }\n\n  /**\n   * Delete user by email\n   * @staticmethod\n   * @param  {string} email - Request object\n   * @return {string} res\n   */\n  static UserdeleteBookingByid(userId, bookingId) {\n    return new Promise((resolve, reject) => {\n      const query = `DELETE FROM Bookings WHERE id = '${bookingId}' and createduser='${userId}'`;\n      db.query(query)\n        .then((result) => {\n          if (result.rowCount === 0) {\n            const message = {};\n            message.status = 400;\n            message.error = 'booking id does not exist';\n            reject(message);\n          } else if (result.rowCount >= 1) {\n            const response = 'booking Deleted';\n            resolve(response);\n          }\n        })\n        .catch((error) => {\n          const messager = 'Error Finding Booking Id';\n          reject(error);\n        });\n    });\n  }\n\n\n  /**\n   * Delete user by email\n   * @staticmethod\n   * @param  {string} email - Request object\n   * @return {string} res\n   */\n  static deleteTripByBusid(busid) {\n    return new Promise((resolve, reject) => {\n      const query = `DELETE FROM Trips WHERE busid = '${busid}'`;\n      db.query(query)\n        .then((result) => {\n          if (result.rowCount === 0) {\n            const message = 'busid does not exist';\n            reject(message);\n          } else if (result.rowCount >= 1) {\n            const response = 'bus Deleted';\n            resolve(response);\n          }\n        })\n        .catch((error) => {\n          const messager = 'Error Finding bus';\n          reject(error);\n        });\n    });\n  }\n\n\n  /**\n   * save new user\n   * @staticmethod\n   * @param  {string} body - Request object\n   * @return {string} res\n   */\n  static saveUserQuery(body) {\n    const {\n      email,\n      firstName,\n      lastName,\n      password,\n      phoneNumber,\n      isAdmin,\n    } = body;\n\n    const today = new Date();\n    const date = `${today.getFullYear()}-${today.getMonth() + 1}-${today.getDate()}`;\n    const time = `${today.getHours()}:${today.getMinutes()}:${today.getSeconds()}`;\n    const createdAt = `${date} ${time}`;\n\n\n    return new Promise((resolve, reject) => {\n      this.findUserByEmailQuery(email)\n        .then((error) => {\n          reject(error);\n        })\n        .catch(() => {\n          bcrypt.hash(password, saltRounds).then((hash) => {\n            const queryBody = `\n                              INSERT INTO users(email,firstname, lastname, password, phonenumber, createdon, isadmin)\n                              VALUES ( '${email}','${firstName}', '${lastName}', '${hash}', '${phoneNumber}','${createdAt}', '${isAdmin}') returning * `;\n            db.query(queryBody)\n              .then((result) => {\n                if (result.rowCount) {\n                  resolve(result.rows);\n                } else if (!(result.rowCount)) {\n                  const response = 'Could Not Save User';\n                  reject(response);\n                }\n              })\n              .catch((e) => {\n                reject(e);\n              });\n          });\n        });\n    });\n  }\n\n  /**\n   * Save Account Query\n   * @staticmethod\n   * @param  {string} body - Request object\n   * @param  {string} userid - Request object\n   * @return {string} res\n   */\n  static saveBusQuery(body, userid) {\n    const {\n      numberPlate,\n      manufacturer,\n      model,\n      year,\n      capacity,\n    } = body;\n\n    const today = new Date();\n    const date = `${today.getFullYear()}-${today.getMonth() + 1}-${today.getDate()}`;\n    const time = `${today.getHours()}:${today.getMinutes()}:${today.getSeconds()}`;\n    const createdAt = `${date} ${time}`;\n\n    return new Promise((resolve, reject) => {\n      this.findBusByplateNumberQuery(numberPlate)\n        .then((error) => {\n          reject(error);\n        })\n        .catch(() => {\n          const queryBody = `\n            INSERT INTO Buses(userid, number_plate, manufacturer, model, year, capacity, createdon)\n  VALUES (${userid}, '${numberPlate}', '${manufacturer}', '${model}', '${year}', '${capacity}', '${createdAt}') returning * `;\n          db.query(queryBody)\n            .then((result) => {\n              if (result.rowCount >= 1) {\n                resolve(result);\n              } else if (result.rowCount === 0) {\n                const response = 'Could Not Save Buses';\n                reject(response);\n              }\n            })\n            .catch((e) => {\n              reject(e);\n            });\n        });\n    });\n  }\n\n\n  /**\n   * Save Trip Query\n   * @staticmethod\n   * @param  {string} body - Request object\n   * @param  {string} userid - Request object\n   * @return {string} res\n   */\n  static saveTripQuery(body, userid) {\n    const {\n      busId,\n      origin,\n      destination,\n      tripDate,\n      fare,\n      status,\n    } = body;\n\n\n    const today = new Date();\n    const date = `${today.getFullYear()}-${today.getMonth() + 1}-${today.getDate()}`;\n    const time = `${today.getHours()}:${today.getMinutes()}:${today.getSeconds()}`;\n    const createdAt = `${date} ${time}`;\n    const tripDateformat = moment(tripDate).format('DD-MM-YYYY');\n\n    return new Promise((resolve, reject) => {\n      this.findBusByBusid(busId)\n        .then((res) => {\n          const {\n            capacity,\n          } = res.rows[0];\n          this.findBusStatus(busId).then(() => {\n            const queryBody = `\n                INSERT INTO Trips(createduser, busid, origin, destination, tripdate, fare, status,capacity, createdon)\n      VALUES ( ${userid},'${busId}','${origin}', '${destination}','${tripDateformat}','${fare}','${status}','${capacity}','${createdAt}') returning * `;\n            db.query(queryBody)\n              .then((result) => {\n                if (result.rowCount >= 1) {\n                  resolve(result);\n                } else if (result.rowCount === 0) {\n                  const response = 'Could Not Save Trip';\n                  reject(response);\n                }\n              })\n              .catch((e) => {\n                console.log('firsterror', e);\n                reject(e);\n              });\n          }).catch(() => {\n            const obj1 = {};\n            obj1.status = 404;\n            obj1.Error = 'This bus id is already assign to a trip';\n            reject(obj1);\n          });\n        })\n        .catch((error) => {\n          err.status = 400;\n          err.Message = 'this bus id does not exist';\n          reject(error);\n        });\n    });\n  }\n\n  /**\n   * Find all user\n   * @staticmethod\n   * @param  {string} id - Request object\n   * @return {string} res\n   */\n  static findAllTripsQuery() {\n    return new Promise((resolve, reject) => {\n      const query = 'SELECT * FROM Trips';\n      db.query(query)\n        .then((result) => {\n          if (!(result.rowCount)) {\n            err.Message = 'Trips Array Empty';\n            err.Status = 400;\n            reject(err);\n          } else if (result.rowCount) {\n            obj.rowCount = result.rowCount;\n            obj.rows = result.rows;\n            resolve(obj);\n          }\n        })\n        .catch(() => {\n          err.Message = 'Error Finding All Trips';\n          err.Status = '02';\n          reject(err);\n        });\n    });\n  }\n\n\n  /**\n   * Update Trips Status Query\n   * @staticmethod\n   * @param  {string} Tripsid - Request object\n   * @param  {string} body - Request object\n   * @return {string} res\n   */\n  static updateTripStatusQuery(id, body) {\n    const {\n      status,\n    } = body;\n    return new Promise((resolve, reject) => {\n      const queryBody = `UPDATE Trips SET status = '${status}' WHERE id = '${id}' returning * `;\n      db.query(queryBody)\n        .then((result) => {\n          if (result.rowCount === 0) {\n            const response = 'Trips does not exist';\n            reject(response);\n          } else if (result.rowCount >= 1) {\n            obj.rowCount = result.rowCount;\n            obj.rows = result.rows;\n            resolve(obj);\n          }\n        })\n        .catch(() => {\n          const error = 'Error Finding trip';\n          reject(error);\n        });\n    });\n  }\n\n\n  /**\n   * Update Trips Status Query\n   * @staticmethod\n   * @param  {string} Tripsid - Request object\n   * @param  {string} body - Request object\n   * @return {string} res\n   */\n  static updateSeatNumberQuery(tripId, body) {\n    const {\n      seatNumber,\n    } = body;\n    console.log('bodyyy', body);\n    return new Promise((resolve, reject) => {\n      this.findTripsById(tripId).then((res) => {\n        const {\n          capacity,\n        } = res.rows[0];\n        console.log('omoo', res.rows[0]);\n        console.log('seattttttt', typeof (seatNumber), typeof (capacity));\n        if (Number(seatNumber) > Number(capacity)) {\n          const obj2 = {};\n          obj2.status = 400;\n          obj2.Message = `this seat number is not available pls select from 1 to ${capacity}`;\n          return reject(obj2);\n        }\n        this.findSeatNumberByTripid(tripId, seatNumber).then((respond) => {\n          console.log('alllll', respond.rows.length);\n          if (respond.rows.length > 0) {\n            const obj2 = {};\n            obj2.status = 400;\n            obj2.Message = 'this seatNumber has been taken pls choose available seat number';\n            reject(obj2);\n          }\n\n          console.log('testmeee', seatNumber, tripId);\n          const queryBody = `UPDATE Bookings SET seatnumber = '${seatNumber}' WHERE tripid = '${tripId}' returning * `;\n          db.query(queryBody)\n            .then((result) => {\n              if (result.rowCount === 0) {\n                console.log('identity.', result.rowCount);\n                const response = 'Trips does not exist';\n                reject(response);\n              } else if (result.rowCount >= 1) {\n                obj.rowCount = result.rowCount;\n                obj.rows = result.rows;\n                resolve(obj);\n              }\n            })\n            .catch((erro) => {\n              const error = 'Error Finding trip';\n              console.log(erro);\n              reject(error);\n            });\n        }).catch((error) => {\n          console.log(error);\n          return reject(err);\n        });\n      })\n        .catch((error) => {\n          console.log(error);\n          return reject(err);\n        });\n    });\n  }\n\n\n  /**\n   * Save Booking Query\n   * @staticmethod\n   * @param  {string} body - Request object\n   * @param  {string} userid - Request object\n   * @return {string} res\n   */\n  static saveBookingQuery(body, userid, useremail, userfname, userlname) {\n    const {\n      tripId,\n      seatNumber,\n    } = body;\n\n    console.log('tripppiddd', tripId, seatNumber);\n\n\n    const today = new Date();\n    const date = `${today.getFullYear()}-${today.getMonth() + 1}-${today.getDate()}`;\n    const time = `${today.getHours()}:${today.getMinutes()}:${today.getSeconds()}`;\n    const createdAt = `${date} ${time}`;\n\n    return new Promise((resolve, reject) => {\n      this.findTripsById(tripId).then((res) => {\n        const {\n          tripdate,\n          busid,\n          capacity,\n        } = res.rows[0];\n        console.log('seattttttt', typeof (seatNumber), typeof (capacity));\n        if (Number(seatNumber) > Number(capacity)) {\n          const obj2 = {};\n          obj2.status = 400;\n          obj2.Message = `this seat number is not available pls select from 1 to ${capacity}`;\n          return reject(obj2);\n        }\n        this.findSeatNumberByTripid(tripId, seatNumber).then((respond) => {\n          console.log('alllll', respond.rows.length);\n          if (respond.rows.length > 0) {\n            const obj2 = {};\n            obj2.status = 400;\n            obj2.Message = 'this seatNumber has been taken pls choose available seat number';\n            reject(obj2);\n          }\n\n          const queryBody = `\n                INSERT INTO Bookings(createduser, tripid, busid, tripdate, seatnumber,firstname, lastname, email,createdon)\n      VALUES ( ${userid},'${tripId}','${busid}', '${tripdate}','${seatNumber}','${userfname}','${userlname}','${useremail}','${createdAt}') returning * `;\n          db.query(queryBody)\n            .then((result) => {\n              if (result.rowCount >= 1) {\n                resolve(result);\n              } else if (result.rowCount === 0) {\n                const response = 'Could Not Save Booking';\n                reject(response);\n              }\n            })\n            .catch((e) => {\n              console.log('firsterror', e);\n              reject(e);\n            });\n        }).catch((error) => {\n          console.log(error);\n          return reject(err);\n        });\n      })\n        .catch((error) => {\n          console.log(error);\n          return reject(err);\n        });\n    });\n  }\n}\n\nexport default queryProvider;\n"],"file":"queries.js"}