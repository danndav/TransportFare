{"version":3,"sources":["../../server/utilities/comparePassword.js"],"names":["ComparePassword","newpassword","dbpassword","Promise","resolve","reject","bcrypt","compare","then","response","Error"],"mappings":";;;;;;;AAAA;;;;;;;;;;AAEA;;;;IAIMA,e;;;;;;;;;;AACJ;;;;;;;4BAOeC,W,EAAaC,U,EAAY;AACtC,aAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC;AACAC,2BAAOC,OAAP,CAAeN,WAAf,EAA4BC,UAA5B,EAAwCM,IAAxC,CAA6C,UAACC,QAAD,EAAc;AACzD,cAAIA,QAAJ,EAAc;AACZL,YAAAA,OAAO,CAAC,kBAAD,CAAP;AACD,WAFD,MAEO;AACL;AACAC,YAAAA,MAAM,CAAC,IAAIK,KAAJ,CAAU,sBAAV,CAAD,CAAN;AACD;AACF,SAPD;AAQD,OAVM,CAAP;AAWD;;;;;;eAEYV,e","sourcesContent":["import bcrypt from 'bcrypt';\n\n/**\n * @exports\n * @class comparePassword\n */\nclass ComparePassword {\n  /**\n     * Userhelper Class\n     * @staticmethod\n     * @param  {string} newpassword\n     * @param {string} dbpassword\n     * @return {number} a\n     */\n  static compare(newpassword, dbpassword) {\n    return new Promise((resolve, reject) => {\n      // Load hash from your password DB.\n      bcrypt.compare(newpassword, dbpassword).then((response) => {\n        if (response) {\n          resolve('Password Matched');\n        } else {\n          /* istanbul ignore next-line */\n          reject(new Error('Password not matched'));\n        }\n      });\n    });\n  }\n}\nexport default ComparePassword;\n"],"file":"comparePassword.js"}