{"version":3,"sources":["../../../server/utilities/services/bookingServices.js"],"names":["BookingService","body","userid","Promise","resolve","reject","queryProvider","findUserById","then","res","rows","firstname","lastname","email","console","log","saveBookingQuery","respond","data","bookingId","id","userId","createduser","TripId","tripid","busId","busid","tripDate","tripdate","seatNumber","seatnumber","firstName","lastName","setnumber","createdOn","createdon","err","typeofUser","findAllBookingsQuery","response","findAllmyBookingQuery","deleteBookingByid","UserdeleteBookingByid","updateSeatNumberQuery"],"mappings":";;;;;;;AAAA;;;;;;;;;;AAGA;;;;IAIMA,c;;;;;;;;;;AACJ;;;;;;;gCAOmBC,I,EAAMC,M,EAAQ;AAC/B,aAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCC,4BAAcC,YAAd,CAA2BL,MAA3B,EAAmCM,IAAnC,CAAwC,UAACC,GAAD,EAAS;AAAA,2BACRA,GAAG,CAACC,IAAJ,CAAS,CAAT,CADQ;AAAA,cACvCC,SADuC,cACvCA,SADuC;AAAA,cAC5BC,QAD4B,cAC5BA,QAD4B;AAAA,cAClBC,KADkB,cAClBA,KADkB;AAE/CC,UAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBd,IAAvB,EAA6BC,MAA7B;AACAY,UAAAA,OAAO,CAACC,GAAR,CAAYN,GAAG,CAACC,IAAJ,CAAS,CAAT,CAAZ;;AACAJ,8BAAcU,gBAAd,CAA+Bf,IAA/B,EAAqCC,MAArC,EAA6CS,SAA7C,EAAwDC,QAAxD,EAAkEC,KAAlE,EACGL,IADH,CACQ,UAACS,OAAD,EAAa;AACjB,gBAAMC,IAAI,GAAG;AACXC,cAAAA,SAAS,EAAEF,OAAO,CAACP,IAAR,CAAa,CAAb,EAAgBU,EADhB;AAEXC,cAAAA,MAAM,EAAEJ,OAAO,CAACP,IAAR,CAAa,CAAb,EAAgBY,WAFb;AAGXC,cAAAA,MAAM,EAAEN,OAAO,CAACP,IAAR,CAAa,CAAb,EAAgBc,MAHb;AAIXC,cAAAA,KAAK,EAAER,OAAO,CAACP,IAAR,CAAa,CAAb,EAAgBgB,KAJZ;AAKXC,cAAAA,QAAQ,EAAEV,OAAO,CAACP,IAAR,CAAa,CAAb,EAAgBkB,QALf;AAMXC,cAAAA,UAAU,EAAEZ,OAAO,CAACP,IAAR,CAAa,CAAb,EAAgBoB,UANjB;AAOXC,cAAAA,SAAS,EAAEd,OAAO,CAACP,IAAR,CAAa,CAAb,EAAgBC,SAPhB;AAQXqB,cAAAA,QAAQ,EAAEf,OAAO,CAACP,IAAR,CAAa,CAAb,EAAgBuB,SARf;AASXpB,cAAAA,KAAK,EAAEI,OAAO,CAACP,IAAR,CAAa,CAAb,EAAgBG,KATZ;AAUXqB,cAAAA,SAAS,EAAEjB,OAAO,CAACP,IAAR,CAAa,CAAb,EAAgByB;AAVhB,aAAb;AAaArB,YAAAA,OAAO,CAACC,GAAR,CAAYG,IAAZ;AACAJ,YAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BN,GAA3B;AAEAL,YAAAA,OAAO,CAACc,IAAD,CAAP;AACD,WAnBH,WAoBS,UAACkB,GAAD,EAAS;AACdtB,YAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BqB,GAA3B;AACA,mBAAO/B,MAAM,CAAC+B,GAAD,CAAb;AACD,WAvBH;AAwBD,SA5BD,WA6BS,UAACA,GAAD,EAAS;AACdtB,UAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BqB,GAA3B;AACA,iBAAO/B,MAAM,CAAC+B,GAAD,CAAb;AACD,SAhCH;AAiCD,OAlCM,CAAP;AAmCD;AAED;;;;;;;;2CAK8BC,U,EAAYhB,M,EAAQ;AAChD,aAAO,IAAIlB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,YAAIgC,UAAU,KAAK,IAAnB,EAAyB;AACvB/B,8BAAcgC,oBAAd,GACG9B,IADH,CACQ,UAAA+B,QAAQ;AAAA,mBAAInC,OAAO,CAACmC,QAAD,CAAX;AAAA,WADhB,WAES,UAAAH,GAAG;AAAA,mBAAI/B,MAAM,CAAC+B,GAAD,CAAV;AAAA,WAFZ;AAGD,SAJD,MAIO;AACL9B,8BAAckC,qBAAd,CAAoCnB,MAApC,EACGb,IADH,CACQ,UAAA+B,QAAQ;AAAA,mBAAInC,OAAO,CAACmC,QAAD,CAAX;AAAA,WADhB,WAES,UAAAH,GAAG;AAAA,mBAAI/B,MAAM,CAAC+B,GAAD,CAAV;AAAA,WAFZ;AAGD;AACF,OAVM,CAAP;AAWD;AAED;;;;;;;;kCAKqBC,U,EAAYhB,M,EAAQF,S,EAAW;AAClD,aAAO,IAAIhB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,YAAIgC,UAAU,KAAK,IAAnB,EAAyB;AACvB/B,8BAAcmC,iBAAd,CAAgCtB,SAAhC,EACGX,IADH,CACQ,UAAA+B,QAAQ;AAAA,mBAAInC,OAAO,CAACmC,QAAD,CAAX;AAAA,WADhB,WAES,UAAAH,GAAG;AAAA,mBAAI/B,MAAM,CAAC+B,GAAD,CAAV;AAAA,WAFZ;AAGD,SAJD,MAIO;AACL9B,8BAAcoC,qBAAd,CAAoCrB,MAApC,EAA4CF,SAA5C,EACGX,IADH,CACQ,UAAA+B,QAAQ;AAAA,mBAAInC,OAAO,CAACmC,QAAD,CAAX;AAAA,WADhB,WAES,UAAAH,GAAG;AAAA,mBAAI/B,MAAM,CAAC+B,GAAD,CAAV;AAAA,WAFZ;AAGD;AACF,OAVM,CAAP;AAWD;AAGD;;;;;;;;;;;;4CAS+BhB,E,EAAInB,I,EAAM;AACvC,aAAO,IAAIE,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCC,4BACGqC,qBADH,CACyBvB,EADzB,EAC6BnB,IAD7B,EAEGO,IAFH,CAEQ,UAACC,GAAD,EAAS;AACbK,UAAAA,OAAO,CAACC,GAAR,CAAYN,GAAG,CAACC,IAAhB;AACA,cAAMQ,IAAI,GAAG;AACXE,YAAAA,EAAE,EAAEX,GAAG,CAACC,IAAJ,CAAS,CAAT,EAAYU,EADL;AAEXS,YAAAA,UAAU,EAAEpB,GAAG,CAACC,IAAJ,CAAS,CAAT,EAAYoB;AAFb,WAAb;AAIA1B,UAAAA,OAAO,CAACc,IAAD,CAAP;AACD,SATH,WAUS,UAAAkB,GAAG;AAAA,iBAAI/B,MAAM,CAAC+B,GAAD,CAAV;AAAA,SAVZ;AAWD,OAZM,CAAP;AAaD;;;;;;eAEYpC,c","sourcesContent":["import queryProvider from '../queries';\n\n\n/** export default BookingService;\n * @exports\n * @class BookingService\n */\nclass BookingService {\n  /**\n     * save new Booking\n     * @staticmethod\n     * @param  {string} body - Request object\n     * @param  {string} userid - Request object\n     * @return {string} res findUserById\n     */\n  static saveBooking(body, userid) {\n    return new Promise((resolve, reject) => {\n      queryProvider.findUserById(userid).then((res) => {\n        const { firstname, lastname, email } = res.rows[0];\n        console.log('bodyyyy', body, userid);\n        console.log(res.rows[0]);\n        queryProvider.saveBookingQuery(body, userid, firstname, lastname, email)\n          .then((respond) => {\n            const data = {\n              bookingId: respond.rows[0].id,\n              userId: respond.rows[0].createduser,\n              TripId: respond.rows[0].tripid,\n              busId: respond.rows[0].busid,\n              tripDate: respond.rows[0].tripdate,\n              seatNumber: respond.rows[0].seatnumber,\n              firstName: respond.rows[0].firstname,\n              lastName: respond.rows[0].setnumber,\n              email: respond.rows[0].email,\n              createdOn: respond.rows[0].createdon,\n            };\n\n            console.log(data);\n            console.log('hello there', res);\n\n            resolve(data);\n          })\n          .catch((err) => {\n            console.log('hello there', err);\n            return reject(err);\n          });\n      })\n        .catch((err) => {\n          console.log('hello there', err);\n          return reject(err);\n        });\n    });\n  }\n\n  /**\n   * view all Booking created\n   * @staticmethod\n   * @return {string} res\n   */\n  static viewAllCreatedBookings(typeofUser, userId) {\n    return new Promise((resolve, reject) => {\n      if (typeofUser === true) {\n        queryProvider.findAllBookingsQuery()\n          .then(response => resolve(response))\n          .catch(err => reject(err));\n      } else {\n        queryProvider.findAllmyBookingQuery(userId)\n          .then(response => resolve(response))\n          .catch(err => reject(err));\n      }\n    });\n  }\n\n  /**\n   *Delete Booking created\n   * @staticmethod\n   * @return {string} res\n   */\n  static DeleteBooking(typeofUser, userId, bookingId) {\n    return new Promise((resolve, reject) => {\n      if (typeofUser === true) {\n        queryProvider.deleteBookingByid(bookingId)\n          .then(response => resolve(response))\n          .catch(err => reject(err));\n      } else {\n        queryProvider.UserdeleteBookingByid(userId, bookingId)\n          .then(response => resolve(response))\n          .catch(err => reject(err));\n      }\n    });\n  }\n\n\n  /**\n     * update Booking seatnumber status\n     * @staticmethod\n     * @param  {string} BookingId - Request object\n     * @param  {string} body - Request object\n     * @param  {string} host - Request object\n     * @param  {string} user_id - Request object\n     * @return {string} res\n     */\n  static bookingupdateseatNumber(id, body) {\n    return new Promise((resolve, reject) => {\n      queryProvider\n        .updateSeatNumberQuery(id, body)\n        .then((res) => {\n          console.log(res.rows);\n          const data = {\n            id: res.rows[0].id,\n            seatNumber: res.rows[0].seatnumber,\n          };\n          resolve(data);\n        })\n        .catch(err => reject(err));\n    });\n  }\n}\nexport default BookingService;\n"],"file":"bookingServices.js"}