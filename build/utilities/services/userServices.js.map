{"version":3,"sources":["../../../server/utilities/services/userServices.js"],"names":["UserService","email","Promise","resolve","reject","queryProvider","findUserByEmailQuery","then","response","err","body","saveUserQuery","res","token","jwt","sign","id","isAdmin","isadmin","config","jwtSecretKey","expiresIn","data","firstName","firstname","trim","lastName","lastname","userpassword","findUserByEmail","passwordValidator","compare","rows","password"],"mappings":"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","sourcesContent":["import jwt from 'jsonwebtoken';\nimport config from '../../config/index';\nimport passwordValidator from '../comparePassword';\nimport queryProvider from '../queries';\n\n\n/**\n * @exports\n * @class UserService\n */\nclass UserService {\n  /**\n   * Find user by email\n   * @staticmethod\n   * @param  {string} email - Request object\n   * @return {string} res\n   */\n  static findUserByEmail(email) {\n    return new Promise((resolve, reject) => {\n      queryProvider\n        .findUserByEmailQuery(email)\n        .then(response => resolve(response))\n        .catch(err => reject(err));\n    });\n  }\n\n\n  /**\n   * save new user\n   * @staticmethod\n   * @param  {string} body - Request object\n   * @return {string} res\n   */\n  static saveUser(body) {\n    return new Promise((resolve, reject) => {\n      queryProvider\n        .saveUserQuery(body)\n        .then((res) => {\n          const token = jwt.sign({\n            id: res[0].id,\n            email: res[0].email,\n            isAdmin: res[0].isadmin,\n          }, config.jwtSecretKey, {\n            expiresIn: 86400,\n          });\n\n          const data = {\n            token,\n            id: res[0].id,\n            firstName: res[0].firstname.trim(),\n            lastName: res[0].lastname.trim(),\n            email: res[0].email.trim(),\n            isAdmin: res[0].isadmin,\n          };\n\n          resolve(data);\n        })\n        .catch(err => reject(err));\n    });\n  }\n\n  /**\n   * validateUserLogin\n   * @staticmethod\n   * @param  {string} email - newpassword\n   *  @param  {string} userpassword - token\n   * @return {string} res\n   */\n  static validateUserLogin(email, userpassword) {\n    return new Promise((resolve, reject) => {\n      this.findUserByEmail(email)\n        .then((res) => {\n          passwordValidator\n            .compare(userpassword, res.rows[0].password)\n            .then(() => {\n              const token = jwt.sign({\n                id: res.rows[0].id,\n                email: res.rows[0].email,\n                isAdmin: res.rows[0].isadmin,\n              }, config.jwtSecretKey, {\n                expiresIn: 86400,\n              });\n\n              const data = {\n                token,\n                id: res.rows[0].id,\n                firstName: res.rows[0].firstname,\n                lastName: res.rows[0].lastname,\n                email: res.rows[0].email,\n                isAdmin: res.rows[0].isadmin,\n              };\n              resolve(data);\n            })\n            .catch(() => {\n              /* istanbul ignore next-line */\n              const response = 'Wrong Password and Email Combination';\n              /* istanbul ignore next-line */\n              reject(response);\n            });\n        })\n        .catch((err) => {\n          const response = 'Wrong Email and Password Combination. Please Check your credentials';\n          reject(response);\n        });\n    });\n  }\n}\n\nexport default UserService;\n"],"file":"userServices.js"}