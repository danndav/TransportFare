{"version":3,"sources":["../../server/controllers/userController.js"],"names":["UserController","req","res","UserService","saveUser","body","then","data","status","json","message","err","rowCount","email","password","validateUserLogin","responseMessage"],"mappings":";;;;;;;AAAA;;;;;;;;;;AAEA;;;;IAIMA,c;;;;;;;;;;AACJ;;;;;;;+BAOkBC,G,EAAKC,G,EAAK;AAC1BC,+BACGC,QADH,CACYH,GAAG,CAACI,IADhB,EAEGC,IAFH,CAEQ,UAAAC,IAAI;AAAA,eAAIL,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjCD,UAAAA,MAAM,EAAE,GADyB;AAEjCD,UAAAA,IAAI,EAAJA,IAFiC;AAGjCG,UAAAA,OAAO,EAAE;AAHwB,SAArB,CAAJ;AAAA,OAFZ,WAOS,UAACC,GAAD,EAAS;AACd,YAAIA,GAAG,CAACC,QAAJ,IAAgB,CAApB,EAAuB;AACrB,iBAAOV,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,YAAAA,MAAM,EAAE,GADkB;AAE1BE,YAAAA,OAAO,EAAE;AAFiB,WAArB,CAAP;AAID;AACD;;;AACA,eAAOR,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,UAAAA,OAAO,EAAE;AADiB,SAArB,CAAP;AAGD,OAlBH;AAmBD;AAED;;;;;;;;;;8BAOiBT,G,EAAKC,G,EAAK;AAAA,sBAIrBD,GAAG,CAACI,IAJiB;AAAA,UAEvBQ,KAFuB,aAEvBA,KAFuB;AAAA,UAGvBC,QAHuB,aAGvBA,QAHuB;;AAKzBX,+BACGY,iBADH,CACqBF,KADrB,EAC4BC,QAD5B,EAEGR,IAFH,CAEQ,UAAAC,IAAI;AAAA,eAAIL,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjCD,UAAAA,MAAM,EAAE,GADyB;AAEjCD,UAAAA,IAAI,EAAJA,IAFiC;AAGjCG,UAAAA,OAAO,EAAE;AAHwB,SAArB,CAAJ;AAAA,OAFZ,WAOS,UAAAC,GAAG;AAAA,eAAIT,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjCD,UAAAA,MAAM,EAAE,GADyB;AAEjCQ,UAAAA,eAAe,EAAEL;AAFgB,SAArB,CAAJ;AAAA,OAPZ;AAWD;;;;;;eAGYX,c","sourcesContent":["import UserService from '../utilities/services/userServices';\n\n/**\n * @exports\n * @class UserController\n */\nclass UserController {\n  /**\n   * Creates a new user\n   * @staticmethod\n   * @param  {object} req - user object\n   * @param {object} res - Response object\n   * @return {json} res.json\n   */\n  static createUser(req, res) {\n    UserService\n      .saveUser(req.body)\n      .then(data => res.status(201).json({\n        status: 201,\n        data,\n        message: 'New user created successfully',\n      }))\n      .catch((err) => {\n        if (err.rowCount >= 1) {\n          return res.status(400).json({\n            status: 400,\n            message: 'User with this email exists already',\n          });\n        }\n        /* istanbul ignore next-line */\n        return res.status(400).json({\n          message: 'Could not create user',\n        });\n      });\n  }\n\n  /**\n   * Creates a new user\n   * @staticmethod\n   * @param  {object} req - user object\n   * @param {object} res - Response object\n   * @return {json} res.json\n   */\n  static loginUser(req, res) {\n    const {\n      email,\n      password,\n    } = req.body;\n    UserService\n      .validateUserLogin(email, password)\n      .then(data => res.status(200).json({\n        status: 200,\n        data,\n        message: 'Authentication Successful',\n      }))\n      .catch(err => res.status(401).json({\n        status: 401,\n        responseMessage: err,\n      }));\n  }\n}\n\nexport default UserController;\n"],"file":"userController.js"}