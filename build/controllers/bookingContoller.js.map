{"version":3,"sources":["../../server/controllers/bookingContoller.js"],"names":["BookingController","req","res","userId","userData","id","BookingService","saveBooking","body","then","data","status","json","message","err","typeofUser","isAdmin","viewAllCreatedBookings","response","rows","bookingId","params","DeleteBooking","tripId","seatnumber","bookingupdateseatNumber","error"],"mappings":"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","sourcesContent":["import BookingService from '../utilities/services/bookingServices';\n\n/**\n * @exports\n * @class BookingController\n */\nclass BookingController {\n  /**\n     * Creates a new Booking\n     * @staticmethod\n     * @param  {object} req - user object\n     * @param {object} res - Response object\n     * @return {json} res.json\n     */\n  static createBooking(req, res) {\n    const userId = req.userData.id;\n    BookingService\n      .saveBooking(req.body, userId)\n      .then(data => res.status(201).json({\n        status: 201,\n        data,\n        message: 'New Booking created successfully',\n      }))\n      .catch(err => res.status(400).json(err));\n  }\n\n\n  /**\n   * View all Bookings\n   * @staticmethod\n   * @param  {object} req - Booking object export default BookingController\n   * @param {object} res - Response object\n   * @return {json} res.json\n   */\n  static viewAllBookings(req, res) {\n    const userId = req.userData.id;\n    const typeofUser = req.userData.isAdmin;\n    BookingService\n      .viewAllCreatedBookings(typeofUser, userId)\n      .then(response => res.status(200).json({\n        status: 200,\n        message: 'Successfully fetched all Bookings',\n        data: response.rows,\n      }))\n      .catch(err => res.status(400).json(err));\n  }\n\n  /**\n   * View all Bookings\n   * @staticmethod\n   * @param  {object} req - Booking object export default BookingController\n   * @param {object} res - Response object\n   * @return {json} res.json\n   */\n  static DeleteUserBooking(req, res) {\n    const userId = req.userData.id;\n    const typeofUser = req.userData.isAdmin;\n    const bookingId = req.params.id;\n    BookingService\n      .DeleteBooking(typeofUser, userId, bookingId)\n      .then(response => res.status(200).json({\n        status: 200,\n        message: 'Successfully Deleted Booking',\n        data: response.rows,\n      }))\n      .catch(err => res.status(400).json(err));\n  }\n\n  /**\n     * Update Booking Destination\n     * @staticmethod\n     * @param  {object} req - Booking object\n     * @param {object} res - Response object\n     * @return {json} res.json\n     */\n  static updateBookingSeatNumber(req, res) {\n    const {\n      tripId,\n    } = req.params;\n    const seatnumber = req.body;\n\n    BookingService\n      .bookingupdateseatNumber(tripId, seatnumber)\n      .then(response => res.status(200).json({\n        status: 200,\n        message: 'Booking SeatNumber Updated Successfully',\n        data: response,\n      }))\n    // eslint-disable-next-line no-unused-vars\n      .catch(err => res.status(404).json({\n        status: 404,\n        error: 'This Booking does not exist',\n      }));\n  }\n}\n\n\nexport default BookingController;\n"],"file":"bookingContoller.js"}